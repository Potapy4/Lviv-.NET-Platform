<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LvivDotNet.WebApi</name>
    </assembly>
    <members>
        <member name="T:LvivDotNet.Controllers.EventsController">
            <summary>
            Events controller.
            </summary>
        </member>
        <member name="M:LvivDotNet.Controllers.EventsController.#ctor(MediatR.IMediator)">
            <summary>
            Initializes a new instance of the <see cref="T:LvivDotNet.Controllers.EventsController"/> class.
            </summary>
            <param name="mediator"> Mediator service. </param>
        </member>
        <member name="M:LvivDotNet.Controllers.EventsController.AddEvent(LvivDotNet.Application.Events.Commands.AddEvent.AddEventCommand)">
            <summary>
            Add`s event.
            </summary>
            <param name="command"> Add event command. </param>
            <returns> New event id.  </returns>
        </member>
        <member name="M:LvivDotNet.Controllers.EventsController.GetEvent(System.Int32)">
            <summary>
            Get`s even.
            </summary>
            <param name="id"> Event id. </param>
            <returns> Event model. </returns>
        </member>
        <member name="M:LvivDotNet.Controllers.EventsController.GetTicketTemplates(System.Int32)">
            <summary>
            Gets`a event ticket templates.
            </summary>
            <param name="eventId"> Event id. </param>
            <returns> Ticket templates models collection. </returns>
        </member>
        <member name="M:LvivDotNet.Controllers.EventsController.GetEvents(System.Int32,System.Int32)">
            <summary>
            Get`s events.
            </summary>
            <param name="take"> Count of events to take. </param>
            <param name="skip"> Count of events to skip. </param>
            <returns> Page of short event models. </returns>
        </member>
        <member name="M:LvivDotNet.Controllers.EventsController.UpdateEvent(LvivDotNet.Application.Events.Commands.UpdateEvent.UpdateEventCommand)">
            <summary>
            Update`s event.
            </summary>
            <param name="command"> Update event command. </param>
            <returns> Empty task. </returns>
        </member>
        <member name="T:LvivDotNet.WebApi.Controllers.PingController">
            <summary>
            Health check controller.
            </summary>
        </member>
        <member name="M:LvivDotNet.WebApi.Controllers.PingController.Ping">
            <summary>
            Ping.
            </summary>
            <returns> Health check response. </returns>
        </member>
        <member name="T:LvivDotNet.WebApi.Controllers.TicketTemplatesController">
            <summary>
            Ticket templates controller.
            </summary>
        </member>
        <member name="M:LvivDotNet.WebApi.Controllers.TicketTemplatesController.#ctor(MediatR.IMediator)">
            <summary>
            Initializes a new instance of the <see cref="T:LvivDotNet.WebApi.Controllers.TicketTemplatesController"/> class.
            </summary>
            <param name="mediator"> Mediator service. </param>
        </member>
        <member name="M:LvivDotNet.WebApi.Controllers.TicketTemplatesController.AddTicketTemplate(LvivDotNet.Application.TicketTemplates.Commands.AddTicketTemplate.AddTicketTemplateCommand)">
            <summary>
            Add ticket template.
            </summary>
            <param name="command"> Add ticket template command. </param>
            <returns> New ticket template id. </returns>
        </member>
        <member name="M:LvivDotNet.WebApi.Controllers.TicketTemplatesController.GetTicketTemplate(System.Int32)">
            <summary>
            Gets ticket template.
            </summary>
            <param name="id"> Ticket template id.  </param>
            <returns>Ticket template model. </returns>
        </member>
        <member name="M:LvivDotNet.WebApi.Controllers.TicketTemplatesController.DeleteTicketTemplate(System.Int32)">
            <summary>
            Deletes ticket template.
            </summary>
            <param name="id"> Ticket template id. </param>
            <returns> Empty Task. </returns>
        </member>
        <member name="T:LvivDotNet.WebApi.Controllers.UsersController">
            <summary>
            Users controller.
            </summary>
        </member>
        <member name="M:LvivDotNet.WebApi.Controllers.UsersController.#ctor(MediatR.IMediator)">
            <summary>
            Initializes a new instance of the <see cref="T:LvivDotNet.WebApi.Controllers.UsersController"/> class.
            </summary>
            <param name="mediator"> Mediator service. </param>
        </member>
        <member name="M:LvivDotNet.WebApi.Controllers.UsersController.Register(LvivDotNet.Application.Users.Commands.Register.RegisterUserCommand)">
            <summary>
            Register user.
            </summary>
            <param name="command"> User registration command. </param>
            <returns> User auth model. </returns>
        </member>
        <member name="M:LvivDotNet.WebApi.Controllers.UsersController.Refresh(LvivDotNet.Application.Users.Commands.Refresh.RefreshTokenCommand)">
            <summary>
            Refresh JWT token.
            </summary>
            <param name="command"> Refresh JWT token command. </param>
            <returns> User auth model. </returns>
        </member>
        <member name="M:LvivDotNet.WebApi.Controllers.UsersController.Login(LvivDotNet.Application.Users.Commands.Login.LoginCommand)">
            <summary>
            Login user.
            </summary>
            <param name="command"> User login command. </param>
            <returns> User auth model. </returns>
        </member>
        <member name="M:LvivDotNet.WebApi.Controllers.UsersController.Logout(LvivDotNet.Application.Users.Commands.Logout.LogoutCommand)">
            <summary>
            Logout user.
            </summary>
            <param name="command"> User logout command. </param>
            <returns> Empty task. </returns>
        </member>
        <member name="T:LvivDotNet.Filters.CustomExceptionFilterAttribute">
            <summary>
            Exception filter.
            </summary>
        </member>
        <member name="M:LvivDotNet.Filters.CustomExceptionFilterAttribute.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <inheritdoc />
        </member>
        <member name="T:LvivDotNet.Program">
            <summary>
            Entry point.
            </summary>
        </member>
        <member name="M:LvivDotNet.Program.Main(System.String[])">
            <summary>
            Entry point.
            </summary>
            <param name="args"> Arguments. </param>
        </member>
        <member name="M:LvivDotNet.Program.CreateWebHostBuilder(System.String[])">
            <summary>
            Creates WbHostBuilder.
            </summary>
            <param name="args"> Arguments. </param>
            <returns> Web host builder. </returns>
        </member>
        <member name="T:LvivDotNet.Startup">
            <summary>
            Startup class.
            </summary>
        </member>
        <member name="M:LvivDotNet.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:LvivDotNet.Startup"/> class.
            </summary>
            <param name="configuration"> Application configuration. </param>
        </member>
        <member name="P:LvivDotNet.Startup.Configuration">
            <summary>
            Gets application configuration.
            </summary>
        </member>
        <member name="M:LvivDotNet.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services"> DI container. </param>
        </member>
        <member name="M:LvivDotNet.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app"> Application builder. </param>
        </member>
    </members>
</doc>
